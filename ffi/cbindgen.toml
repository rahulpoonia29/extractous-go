header = """
/* 
 * Extractous FFI - C Interface
 * 
 * This header file provides a C-compatible interface to the Extractous
 * document extraction library. It is safe for use with Go via cgo or any
 * C-compatible FFI system.
 *
 * License: Apache-2.0
 * Repository: https://github.com/rahulpoonia229/extractous-go
 *
 * MEMORY MANAGEMENT:
 * All pointers returned by Extractous functions must be freed using the function extractous_free_string.
 * Failure to do so will result in memory leaks.
 *
 *
 * CGO USAGE:
 *   // #cgo CFLAGS: -I${SRCDIR}/include
 *   // #cgo LDFLAGS: -L${SRCDIR}/lib -lextractous_ffi
 *   // #cgo linux LDFLAGS: -Wl,-rpath,$ORIGIN
 *   // #cgo darwin LDFLAGS: -Wl,-rpath,@loader_path
 *   // #include "extractous.h"
 *   import "C"
 */
"""

# Generate pure C header (no C++)
language = "C"
style = "both"          # Both function declarations and typedef definitions
cpp_compat = false      # No C++ compatibility

# Includes
include_guard = "EXTRACTOUS_H"  # Add header guard
sys_includes = []               # No system includes needed
includes = []                   # No additional includes

# Warnings
documentation = true            # Include Rust doc comments
documentation_style = "c"       # Use C-style /** */ comments

[export]
include = []                    # Include all public items
exclude = []                    # No exclusions
prefix = ""                     # No prefix for function names
item_types = [
  "globals",
  "enums",
  "structs",
  "unions",
  "typedefs",
  "opaque",
  "functions",
  "constants",
]

[layout]
packed = "false"                # No packed structs (better portability)
aligned_n = "0"                 # Natural alignment

[fn]
rename_args = "None"            # Keep original arg names
args = "auto"                   # Auto-detect by-value vs by-reference
must_use = "auto"               # Add [[nodiscard]] for important returns
no_return = "noreturn"          # Use noreturn attribute where applicable

[struct]
rename_fields = "None"          # Keep original field names
derive_constructor = false      # No C++ constructors
derive_eq = false               # No operator overloads
derive_neq = false
derive_lt = false
derive_lte = false
derive_gt = false
derive_gte = false

[enum]
rename_variants = "None"        # Keep original variant names
enum_class = false              # C-style enums (not enum class)
prefix_with_name = false        # No enum name prefix on variants

[const]
allow_static_const = true       # Allow static const declarations
allow_constexpr = false         # No constexpr (C++ feature)

[macro_expansion]
bitflags = false                # Don't expand bitflags macros

[parse]
parse_deps = false              # Don't parse dependencies
include = []
exclude = []
clean = false                   # Don't remove items
extra_bindings = []

[parse.expand]
crates = []
all_features = false
default_features = true
features = []
