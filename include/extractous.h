/* Extractous Go FFI - Auto-generated by cbindgen */
/* DO NOT EDIT MANUALLY */

#ifndef EXTRACTOUS_FFI_H
#define EXTRACTOUS_FFI_H

#pragma once

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * Success, no error occurred
 */
#define ERR_OK 0

/**
 * Null pointer was provided as an argument
 */
#define ERR_NULL_POINTER -1

/**
 * Invalid UTF-8 string encoding
 */
#define ERR_INVALID_UTF8 -2

/**
 * String conversion failed
 */
#define ERR_INVALID_STRING -3

/**
 * Document extraction failed
 */
#define ERR_EXTRACTION_FAILED -4

/**
 * I/O operation failed
 */
#define ERR_IO_ERROR -5

/**
 * Invalid configuration provided
 */
#define ERR_INVALID_CONFIG -6

/**
 * Invalid enum value provided
 */
#define ERR_INVALID_ENUM -7

/**
 * UTF-8 encoding (default)
 */
#define CHARSET_UTF8 0

/**
 * US-ASCII encoding
 */
#define CHARSET_US_ASCII 1

/**
 * UTF-16 Big Endian encoding
 */
#define CHARSET_UTF16BE 2

/**
 * No OCR, extract existing text only
 */
#define PDF_OCR_NO_OCR 0

/**
 * OCR only, ignore existing text
 */
#define PDF_OCR_OCR_ONLY 1

/**
 * OCR and extract existing text
 */
#define PDF_OCR_OCR_AND_TEXT_EXTRACTION 2

/**
 * Automatically decide based on content
 */
#define PDF_OCR_AUTO 3

/**
 * Opaque handle to a PdfParserConfig instance
 */
typedef struct CPdfParserConfig {
    uint8_t _private[0];
} CPdfParserConfig;

/**
 * Opaque handle to an Extractor instance
 *
 * This is an opaque pointer that should only be used through the FFI functions.
 * The actual Extractor is stored on the heap.
 */
typedef struct CExtractor {
    uint8_t _private[0];
} CExtractor;

/**
 * Opaque handle to an OfficeParserConfig instance
 */
typedef struct COfficeParserConfig {
    uint8_t _private[0];
} COfficeParserConfig;

/**
 * Opaque handle to a TesseractOcrConfig instance
 */
typedef struct CTesseractOcrConfig {
    uint8_t _private[0];
} CTesseractOcrConfig;

/**
 * C-compatible metadata structure
 *
 * Contains parallel arrays of keys and values, with length stored separately.
 * Both keys and values are null-terminated C strings.
 */
typedef struct CMetadata {
    /**
     * Array of key string pointers
     */
    char **keys;
    /**
     * Array of value string pointers (comma-separated if multiple values)
     */
    char **values;
    /**
     * Number of key-value pairs
     */
    size_t len;
} CMetadata;

/**
 * Opaque handle to a StreamReader instance
 */
typedef struct CStreamReader {
    uint8_t _private[0];
} CStreamReader;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * Create new PDF parser config
 */
struct CPdfParserConfig *extractous_pdf_config_new(void);

/**
 * Set OCR strategy for PDF config
 */
struct CPdfParserConfig *extractous_pdf_config_set_ocr_strategy(struct CPdfParserConfig *handle,
                                                                int strategy);

/**
 * Set extract inline images flag
 */
struct CPdfParserConfig *extractous_pdf_config_set_extract_inline_images(struct CPdfParserConfig *handle,
                                                                         bool value);

/**
 * Free PDF config
 */
void extractous_pdf_config_free(struct CPdfParserConfig *handle);

/**
 * Get human-readable error message for error code
 *
 * # Safety
 *
 * The returned string must be freed with `extractous_string_free`.
 *
 * # Returns
 *
 * Pointer to null-terminated C string, or NULL on error.
 */
char *extractous_error_message(int code);

/**
 * Create a new Extractor with default configuration
 *
 * # Returns
 *
 * Pointer to new Extractor, or NULL on failure.
 * Must be freed with `extractous_extractor_free`.
 */
struct CExtractor *extractous_extractor_new(void);

/**
 * Free an Extractor instance
 *
 * # Safety
 *
 * - `handle` must be a valid pointer returned by `extractous_extractor_new`
 * - `handle` must not be used after this call
 * - Calling this twice on the same pointer causes undefined behavior
 */
void extractous_extractor_free(struct CExtractor *handle);

/**
 * Set maximum length for extracted string content
 *
 * # Safety
 *
 * - `handle` must be a valid Extractor pointer
 * - Returns a NEW handle; old handle is consumed and must not be used
 *
 * # Returns
 *
 * New Extractor handle with updated config, or NULL on error.
 */
struct CExtractor *extractous_extractor_set_extract_string_max_length(struct CExtractor *handle,
                                                                      int max_length);

/**
 * Set character encoding for extraction
 *
 * # Safety
 *
 * - `handle` must be a valid Extractor pointer
 * - `encoding` must be a valid CHARSET_* constant
 * - Returns a NEW handle; old handle is consumed
 *
 * # Returns
 *
 * New Extractor handle, or NULL if encoding is invalid.
 */
struct CExtractor *extractous_extractor_set_encoding(struct CExtractor *handle, int encoding);

/**
 * Set PDF parser configuration
 *
 * # Safety
 *
 * - `handle` must be a valid Extractor pointer
 * - `config` must be a valid PdfParserConfig pointer
 * - Returns a NEW handle; old handle is consumed
 */
struct CExtractor *extractous_extractor_set_pdf_config(struct CExtractor *handle,
                                                       struct CPdfParserConfig *config);

/**
 * Set Office parser configuration
 *
 * # Safety
 *
 * Same safety requirements as `extractous_extractor_set_pdf_config`.
 */
struct CExtractor *extractous_extractor_set_office_config(struct CExtractor *handle,
                                                          struct COfficeParserConfig *config);

/**
 * Set OCR configuration
 *
 * # Safety
 *
 * Same safety requirements as `extractous_extractor_set_pdf_config`.
 */
struct CExtractor *extractous_extractor_set_ocr_config(struct CExtractor *handle,
                                                       struct CTesseractOcrConfig *config);

/**
 * Extract file content to string
 *
 * # Safety
 *
 * - `handle` must be a valid Extractor pointer
 * - `path` must be a valid null-terminated UTF-8 string
 * - `out_content` and `out_metadata` must be valid pointers
 * - Caller must free returned content with `extractous_string_free`
 * - Caller must free returned metadata with `extractous_metadata_free`
 *
 * # Returns
 *
 * ERR_OK on success, error code on failure.
 */
int extractous_extractor_extract_file_to_string(struct CExtractor *handle,
                                                const char *path,
                                                char **out_content,
                                                struct CMetadata **out_metadata);

/**
 * Extract file content to stream
 *
 * # Safety
 *
 * - `handle` must be a valid Extractor pointer
 * - `path` must be a valid null-terminated UTF-8 string
 * - `out_reader` and `out_metadata` must be valid pointers
 * - Caller must free returned reader with `extractous_stream_free`
 * - Caller must free returned metadata with `extractous_metadata_free`
 *
 * # Returns
 *
 * ERR_OK on success, error code on failure.
 */
int extractous_extractor_extract_file(struct CExtractor *handle,
                                      const char *path,
                                      struct CStreamReader **out_reader,
                                      struct CMetadata **out_metadata);

/**
 * Extract from byte array to string
 *
 * # Safety
 *
 * - `handle` must be a valid Extractor pointer
 * - `data` must point to at least `data_len` valid bytes
 * - `out_content` and `out_metadata` must be valid pointers
 *
 * # Returns
 *
 * ERR_OK on success, error code on failure.
 */
int extractous_extractor_extract_bytes_to_string(struct CExtractor *handle,
                                                 const uint8_t *data,
                                                 size_t data_len,
                                                 char **out_content,
                                                 struct CMetadata **out_metadata);

/**
 * Free a string allocated by Rust
 *
 * # Safety
 *
 * - `s` must be a pointer returned by an extractous function
 * - `s` must not be used after this call
 * - Calling this twice on the same pointer causes undefined behavior
 */
void extractous_string_free(char *s);

/**
 * Free metadata structure
 */
void extractous_metadata_free(struct CMetadata *meta);

/**
 * Read from stream into buffer
 */
int extractous_stream_read(struct CStreamReader *handle,
                           uint8_t *buffer,
                           size_t buffer_size,
                           size_t *bytes_read);

/**
 * Free stream reader
 */
void extractous_stream_free(struct CStreamReader *handle);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

#endif  /* EXTRACTOUS_FFI_H */
