name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on semantic version tags (v1.0.0, v0.2.1, etc.)
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag name (e.g., v1.0.0)'
        required: true
        type: string

# Prevent concurrent releases
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  actions: read

jobs:
  # Build artifacts for all platforms
  build:
    name: Build Release Artifacts
    uses: ./.github/workflows/build.yml
    secrets: inherit

  # Create GitHub Release with built artifacts
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Determine tag name
        id: tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag_name=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: List downloaded artifacts
        shell: bash
        run: |
          echo "Downloaded artifacts:"
          ls -R artifacts
      
      - name: Package per-platform archives
        id: package
        shell: bash
        run: |
          set -e
          mkdir -p release
          
          echo "Creating per-platform release archives..."
          
          # Package each platform separately
          for platform_dir in artifacts/extractous-ffi-*; do
            if [ -d "$platform_dir" ]; then
              platform=$(basename "$platform_dir" | sed 's/extractous-ffi-//')
              
              echo "Packaging $platform..."
              
              # Determine archive extension based on platform
              if [[ "$platform" == windows_* ]]; then
                archive_name="extractous-ffi-${platform}.zip"
                (cd "$platform_dir" && zip -r "../../release/$archive_name" .)
              else
                archive_name="extractous-ffi-${platform}.tar.gz"
                tar -czf "release/$archive_name" -C "$platform_dir" .
              fi
              
              # Generate checksum
              (cd release && sha256sum "$archive_name" > "${archive_name}.sha256")
              
              echo "  âœ“ Created $archive_name"
            fi
          done
          
          echo ""
          echo "Release assets:"
          ls -lh release/
      
      - name: Generate release notes
        id: release-notes
        shell: bash
        run: |
          TAG_NAME="${{ steps.tag.outputs.tag_name }}"
          
          cat > release_notes.md <<'EOF'
          # Extractous Go FFI ${{ steps.tag.outputs.tag_name }}
          
          This release contains the native library binaries for extractous-go.
          
          ## Installation
          
          Use the installation command from your Go project:
          
          ```bash
          go run github.com/rahulpoonia29/extractous-go/cmd/install@latest
          ```
          
          The installer will automatically download the correct platform libraries for you.
          
          ## Available Platforms
          
          - **linux_amd64**: Linux x86_64
          - **windows_amd64**: Windows x86_64
          - **darwin_arm64**: macOS Apple Silicon (M1/M2)
          
          ## Manual Installation
          
          If you prefer to install manually:
          
          1. Download the archive for your platform
          2. Extract it to `./native/{platform}/` in your project
          3. Verify the checksum using the `.sha256` file
          
          ## Archive Contents
          
          Each archive contains:
          - `include/extractous.h` - C header file
          - `lib/` - Platform-specific shared libraries
          
          ## Build Information
          
          - Rust version: 1.90.0
          - Built with GraalVM Native Image
          - Build date: $(date -u +"%Y-%m-%d")
          
          ---
          
          **Note:** This is a draft release. Please review and edit these notes before publishing.
          EOF
          
          cat release_notes.md
      
      - name: Create GitHub Release (Draft)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag_name }}
          name: Release ${{ steps.tag.outputs.tag_name }}
          body_path: release_notes.md
          draft: true
          prerelease: ${{ contains(steps.tag.outputs.tag_name, '-') }}
          files: release/*
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Release summary
        shell: bash
        run: |
          TAG_NAME="${{ steps.tag.outputs.tag_name }}"
          
          echo "## ðŸ“¦ Draft Release Created: ${TAG_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release has been created as a **draft**. Please review it before publishing:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "https://github.com/${{ github.repository }}/releases/tag/${TAG_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Assets" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for file in release/*.{tar.gz,zip}; do
            if [ -f "$file" ]; then
              size=$(du -h "$file" | cut -f1)
              filename=$(basename "$file")
              echo "- \`$filename\` ($size)" >> $GITHUB_STEP_SUMMARY
            fi
          done
