name: Create Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.2.1
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag name (e.g., v1.0.0)'
        required: true
        type: string
      run_id:
        description: 'Build workflow run ID (leave empty to trigger new build)'
        required: false
        type: string

jobs:
  # Optional: Trigger a fresh build if no run_id provided
  trigger-build:
    name: Trigger Build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.run_id == ''
    outputs:
      run_id: ${{ steps.trigger.outputs.run_id }}
    steps:
      - name: Trigger build workflow
        id: trigger
        uses: actions/github-script@v7
        with:
          script: |
            const response = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build-ffi.yml',
              ref: context.ref
            });
            
            // Wait a bit for the workflow to start
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            // Get the latest run
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build-ffi.yml',
              per_page: 1
            });
            
            const runId = runs.data.workflow_runs[0].id;
            core.setOutput('run_id', runId);
            return runId;

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [trigger-build]
    if: always() && (needs.trigger-build.result == 'success' || needs.trigger-build.result == 'skipped')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Determine run ID
        id: run-id
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ github.event.inputs.run_id }}" ]; then
              echo "run_id=${{ github.event.inputs.run_id }}" >> $GITHUB_OUTPUT
            else
              echo "run_id=${{ needs.trigger-build.outputs.run_id }}" >> $GITHUB_OUTPUT
            fi
          else
            # For tag push, use the current workflow run's build artifacts
            # We need to get the run ID from the build that was triggered by this tag
            echo "Using artifacts from tag-triggered build"
            echo "run_id=${{ github.run_id }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Wait for build completion (if triggered)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.run_id == ''
        uses: actions/github-script@v7
        with:
          script: |
            const runId = ${{ steps.run-id.outputs.run_id }};
            
            let status = 'in_progress';
            while (status === 'in_progress' || status === 'queued') {
              await new Promise(resolve => setTimeout(resolve, 30000)); // Wait 30s
              
              const run = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: runId
              });
              
              status = run.data.status;
              console.log(`Build status: ${status}`);
              
              if (run.data.conclusion === 'failure') {
                core.setFailed('Build failed');
                return;
              }
            }
      
      - name: Download all platform artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          run-id: ${{ steps.run-id.outputs.run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create platform archives
        shell: bash
        run: |
          cd artifacts
          
          for platform in linux_amd64 windows_amd64 darwin_amd64 darwin_arm64; do
            if [ -d "extractous-ffi-$platform" ]; then
              echo "Creating archive for $platform..."
              cd "extractous-ffi-$platform"
              tar czf "../extractous-ffi-$platform.tar.gz" .
              cd ..
              
              # Generate checksum
              sha256sum "extractous-ffi-$platform.tar.gz" > "extractous-ffi-$platform.tar.gz.sha256"
              
              echo "âœ“ Created extractous-ffi-$platform.tar.gz"
            fi
          done
          
          echo ""
          echo "=== Created archives ==="
          ls -lh *.tar.gz
      
      - name: Generate release notes
        id: release-notes
        shell: bash
        run: |
          TAG_NAME="${{ github.event.inputs.tag_name || github.ref_name }}"
          
          cat > release_notes.md <<EOF
          # Extractous FFI ${TAG_NAME}
          
          Multi-platform native library binaries for extractous.
          
          ## Platforms
          
          - **Linux AMD64** - \`extractous-ffi-linux_amd64.tar.gz\`
          - **Windows AMD64** - \`extractous-ffi-windows_amd64.tar.gz\`
          - **macOS Intel** - \`extractous-ffi-darwin_amd64.tar.gz\`
          - **macOS Apple Silicon** - \`extractous-ffi-darwin_arm64.tar.gz\`
          
          ## Installation
          
          \`\`\`bash
          # Download and extract for your platform
          tar xzf extractous-ffi-<platform>.tar.gz
          
          # Verify checksum
          sha256sum -c extractous-ffi-<platform>.tar.gz.sha256
          \`\`\`
          
          ## Contents
          
          Each archive contains:
          - Native shared libraries (\`.so\`, \`.dll\`, or \`.dylib\`)
          - C header files for FFI integration
          - All required dependencies (non-system libraries)
          
          ## Build Information
          
          - Built with GraalVM Native Image
          - Rust version: ${{ env.RUST_VERSION }}
          - Build date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          EOF
          
          cat release_notes.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          name: Release ${{ github.event.inputs.tag_name || github.ref_name }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            artifacts/*.tar.gz
            artifacts/*.sha256
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Release summary
        shell: bash
        run: |
          TAG_NAME="${{ github.event.inputs.tag_name || github.ref_name }}"
          
          echo "## ðŸŽ‰ Release Published: ${TAG_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Release created with the following artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          cd artifacts
          for platform in linux_amd64 windows_amd64 darwin_amd64 darwin_arm64; do
            if [ -f "extractous-ffi-$platform.tar.gz" ]; then
              size=$(du -h "extractous-ffi-$platform.tar.gz" | cut -f1)
              checksum=$(cat "extractous-ffi-$platform.tar.gz.sha256" | cut -d' ' -f1 | cut -c1-16)
              echo "- \`extractous-ffi-$platform.tar.gz\` ($size)" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View the release: https://github.com/${{ github.repository }}/releases/tag/${TAG_NAME}" >> $GITHUB_STEP_SUMMARY
