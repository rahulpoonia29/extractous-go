name: Build extractous-ffi

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  RUST_VERSION: "1.90.0"
  CARGO_TERM_COLOR: always

jobs:
  ffi-build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux_amd64
            target: x86_64-unknown-linux-gnu
            lib_ext: so
            os_name: Linux
            
          - os: windows-latest
            platform: windows_amd64
            target: x86_64-pc-windows-msvc
            lib_ext: dll
            os_name: Windows

          # - os: macos-13
          #   platform: darwin_amd64
          #   target: x86_64-apple-darwin
          #   lib_ext: dylib
          #   os_name: macOS
            
          # - os: macos-latest
          #   platform: darwin_arm64
          #   target: aarch64-apple-darwin
          #   lib_ext: dylib
          #   os_name: macOS

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Windows-specific: Setup Visual Studio Build Environment
      - name: Setup Visual Studio Developer Command Prompt
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # Install Rust
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}

      # Linux-specific dependencies
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libssl-dev

      - name: Setup GraalVM (Windows)
        if: runner.os == 'Windows'
        uses: graalvm/setup-graalvm@v1.4.1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'false'
          components: 'native-image'
          set-java-home: 'true'

      - name: Setup GraalVM (Non-Windows)
        if: runner.os != 'Windows'
        uses: graalvm/setup-graalvm@v1.4.1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'false'

      # Rust caching
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          workspaces: "./ffi -> target"
          cache-on-failure: true

      - name: Verify environment
        shell: bash
        run: |
          echo "### Build Environment" >> $GITHUB_STEP_SUMMARY
          echo "- **Rust:** $(rustc --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Cargo:** $(cargo --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Target:** ${{ matrix.target }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform:** ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      # CRITICAL FIX: Remove Git's conflicting link.exe before build
      - name: Fix Windows link.exe conflict
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "Removing conflicting Git link.exe..."
          rm -f /usr/bin/link.exe
          which link.exe || echo "âœ“ Visual Studio link.exe will be used"

      # Build the FFI library
      - name: Build extractous FFI
        working-directory: ./ffi
        shell: bash
        run: |
          set -e
          echo "=== Building extractous FFI for ${{ matrix.target }} ==="
          BUILD_START_TIME=$(date +%s)
          
          cargo build --release --target ${{ matrix.target }} --quiet
          
          BUILD_END_TIME=$(date +%s)
          BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
          echo "Build completed in ${BUILD_DURATION}s"
          echo "BUILD_DURATION=${BUILD_DURATION}" >> $GITHUB_ENV

      # Verify build outputs
      - name: Verify build outputs
        shell: bash
        run: |
          chmod +x ./.github/workflows/scripts/verify-build.sh
          ./.github/workflows/scripts/verify-build.sh \
            "${{ matrix.target }}" \
            "${{ matrix.lib_ext }}" \
            "${{ matrix.os_name }}"

      # Collect distribution artifacts
      - name: Collect distribution artifacts
        shell: bash
        run: |
          chmod +x ./.github/workflows/scripts/collect-dependencies.sh
          ./.github/workflows/scripts/collect-dependencies.sh \
            "${{ matrix.platform }}" \
            "${{ matrix.target }}" \
            "${{ matrix.lib_ext }}" \
            "${{ matrix.os_name }}"

      # Verify distribution artifacts
      - name: Verify distribution artifacts
        shell: bash
        run: |
          chmod +x ./.github/workflows/scripts/verify-distribution.sh
          ./.github/workflows/scripts/verify-distribution.sh \
            "${{ matrix.platform }}" \
            "${{ matrix.lib_ext }}"

      # Upload with optimal compression
      - name: Upload FFI distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extractous-ffi-${{ matrix.platform }}
          path: dist/${{ matrix.platform }}
          retention-days: 7
          compression-level: 9
          if-no-files-found: error

      # Build summary
      - name: Build summary
        shell: bash
        run: |
          echo "## âœ“ Build Complete - ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Platform** | ${{ matrix.platform }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Target** | ${{ matrix.target }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **OS** | ${{ matrix.os }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Duration** | ${BUILD_DURATION}s |" >> $GITHUB_STEP_SUMMARY
          echo "| **Library Extension** | .${{ matrix.lib_ext }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“¦ \`extractous-ffi-${{ matrix.platform }}\` - Distribution ready libraries" >> $GITHUB_STEP_SUMMARY
