name: Build extractous-ffi

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  RUST_VERSION: "1.90.0"
  CARGO_TERM_COLOR: always

jobs:
  ffi-build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux_amd64
            target: x86_64-unknown-linux-gnu
            lib_ext: so
            os_name: Linux
            
          - os: windows-latest
            platform: windows_amd64
            target: x86_64-pc-windows-msvc
            lib_ext: dll
            os_name: Windows
            
          # - os: macos-13
          #   platform: darwin_amd64
          #   target: x86_64-apple-darwin
          #   lib_ext: dylib
          #   os_name: macOS
            
          # - os: macos-latest
          #   platform: darwin_arm64
          #   target: aarch64-apple-darwin
          #   lib_ext: dylib
          #   os_name: macOS

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Windows-specific: Setup Visual Studio Build Environment
      - name: Setup Visual Studio Developer Command Prompt
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Verify Visual Studio Setup (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo Verifying Visual Studio C++ compiler...
          where cl.exe
          cl.exe /version
          echo Visual Studio environment ready

      # Install Rust
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}

      # Linux-specific dependencies
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libssl-dev \
            tree

      # macOS-specific dependencies
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install tree

      # Setup GraalVM with native-image
      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1.4.1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'

      - name: Verify GraalVM installation
        shell: bash
        run: |
          java -version
          native-image --version

      # Cache build artifacts (changes with source code)
      - name: Cache FFI build artifacts
        id: cache-ffi
        uses: actions/cache@v3
        with:
          path: ffi/target
          key: ffi-build-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock', 'ffi/**/*.rs', 'ffi/build.rs', 'ffi/Cargo.toml') }}
          restore-keys: |
            ffi-build-${{ runner.os }}-${{ matrix.target }}-

      - name: Fix timestamps after cache restore
        if: steps.cache-ffi.outputs.cache-hit == 'true'
        working-directory: ./ffi
        shell: bash
        run: |
          echo "Cache restored, fixing timestamps for incremental compilation..."
          # Touch source files FIRST (make them appear newer)
          find . -name "*.rs" -exec touch {} + 2>/dev/null || true
          find . -name "Cargo.toml" -exec touch {} + 2>/dev/null || true
          find . -name "Cargo.lock" -exec touch {} + 2>/dev/null || true
          find . -name "build.rs" -exec touch {} + 2>/dev/null || true
          # Then touch build artifacts (make them appear older than source)
          find target -type f -exec touch {} + 2>/dev/null || true
          echo "âœ“ Timestamps fixed to preserve incremental builds"

      - name: Verify environment
        shell: bash
        run: |
          echo "### Build Environment" >> $GITHUB_STEP_SUMMARY
          echo "- **Rust:** $(rustc --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Cargo:** $(cargo --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Target:** ${{ matrix.target }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform:** ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Status:** ${{ env.CACHE_HIT }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      # Build the FFI library
      - name: Build extractous FFI
        working-directory: ./ffi
        shell: bash
        run: |
          set -e
          echo "=== Building extractous FFI for ${{ matrix.target }} ==="
          BUILD_START_TIME=$(date +%s)

          cargo build --release --target ${{ matrix.target }}

          BUILD_END_TIME=$(date +%s)
          BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
          echo "Build completed in ${BUILD_DURATION}s"
          echo "BUILD_DURATION=${BUILD_DURATION}" >> $GITHUB_ENV

      # Verify build outputs
      - name: Verify build outputs
        working-directory: ./ffi
        shell: bash
        run: |
          chmod +x ../.github/scripts/verify-build.sh
          ../.github/scripts/verify-build.sh \
            "${{ matrix.target }}" \
            "${{ matrix.lib_ext }}" \
            "${{ matrix.os_name }}"

      # Collect distribution artifacts with smart dependency resolution
      - name: Collect distribution artifacts
        working-directory: ./ffi
        shell: bash
        run: |
          chmod +x ../.github/scripts/collect-dependencies.sh
          ../.github/scripts/collect-dependencies.sh \
            "${{ matrix.platform }}" \
            "${{ matrix.target }}" \
            "${{ matrix.lib_ext }}" \
            "${{ matrix.os_name }}"

      # Verify distribution artifacts
      - name: Verify distribution artifacts
        working-directory: ./ffi
        shell: bash
        run: |
          chmod +x ../.github/scripts/verify-distribution.sh
          ../.github/scripts/verify-distribution.sh \
            "${{ matrix.platform }}" \
            "${{ matrix.lib_ext }}"

      # Upload distribution artifacts
      - name: Upload FFI distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extractous-ffi-${{ matrix.platform }}
          path: ffi/dist/${{ matrix.platform }}
          retention-days: 30
          compression-level: 6

      # Build summary
      - name: Build summary
        shell: bash
        run: |
          echo "## âœ“ Build Complete - ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Platform** | ${{ matrix.platform }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Target** | ${{ matrix.target }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **OS** | ${{ matrix.os }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Duration** | ${BUILD_DURATION}s |" >> $GITHUB_STEP_SUMMARY
          echo "| **Cache Hit** | ${{ steps.cache-ffi.outputs.cache-hit }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Library Extension** | .${{ matrix.lib_ext }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“¦ \`extractous-ffi-${{ matrix.platform }}\` - Distribution ready libraries" >> $GITHUB_STEP_SUMMARY

  # Create combined release bundle with all platforms
  create-release:
    name: Create Release Bundle
    needs: ffi-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/testing-workflow')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all platform artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Display artifact structure
        run: |
          echo "=== Downloaded artifacts structure ==="
          tree artifacts/ || find artifacts/ -type f
          echo ""
          echo "=== Artifact sizes ==="
          du -sh artifacts/*
      
      - name: Create platform-specific archives
        shell: bash
        run: |
          cd artifacts
          echo "Creating compressed archives for each platform..."
          
          for platform in linux_amd64 windows_amd64 darwin_amd64 darwin_arm64; do
            if [ -d "extractous-ffi-$platform" ]; then
              echo "Creating archive for $platform..."
              cd "extractous-ffi-$platform"
              tar czf "../extractous-ffi-$platform.tar.gz" .
              cd ..
              
              # Calculate checksum
              sha256sum "extractous-ffi-$platform.tar.gz" > "extractous-ffi-$platform.tar.gz.sha256"
              
              echo "âœ“ Created extractous-ffi-$platform.tar.gz"
            else
              echo "âš  Platform $platform not found, skipping..."
            fi
          done
          
          echo ""
          echo "=== Created archives ==="
          ls -lh *.tar.gz
          
          echo ""
          echo "=== Checksums ==="
          cat *.sha256
      
      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extractous-ffi-all-platforms
          path: |
            artifacts/*.tar.gz
            artifacts/*.sha256
          retention-days: 90
          compression-level: 0
          
      - name: Release summary
        shell: bash
        run: |
          echo "## Multi-Platform Release Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All platforms built and packaged successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Platforms" >> $GITHUB_STEP_SUMMARY
          
          cd artifacts
          for platform in linux_amd64 windows_amd64 darwin_amd64 darwin_arm64; do
            if [ -f "extractous-ffi-$platform.tar.gz" ]; then
              size=$(du -h "extractous-ffi-$platform.tar.gz" | cut -f1)
              checksum=$(cat "extractous-ffi-$platform.tar.gz.sha256" | cut -d' ' -f1 | cut -c1-16)
              
              case $platform in
                linux_amd64)   echo "- **Linux AMD64** - $size (SHA256: \`${checksum}...\`)" >> $GITHUB_STEP_SUMMARY ;;
                windows_amd64) echo "- **Windows AMD64** - $size (SHA256: \`${checksum}...\`)" >> $GITHUB_STEP_SUMMARY ;;
                darwin_amd64)  echo "- **macOS AMD64** (Intel) - $size (SHA256: \`${checksum}...\`)" >> $GITHUB_STEP_SUMMARY ;;
                darwin_arm64)  echo "- **macOS ARM64** (Apple Silicon) - $size (SHA256: \`${checksum}...\`)" >> $GITHUB_STEP_SUMMARY ;;
              esac
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Download" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“¦ Combined archive: \`extractous-ffi-all-platforms\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Each platform archive includes:" >> $GITHUB_STEP_SUMMARY
          echo "- Native libraries (\`.so\`, \`.dll\`, or \`.dylib\`)" >> $GITHUB_STEP_SUMMARY
          echo "- Header files (\`.h\`)" >> $GITHUB_STEP_SUMMARY
          echo "- SHA256 checksums for verification" >> $GITHUB_STEP_SUMMARY
