name: Build Cross-Platform

on:
  push:
    branches: [main]
    paths:
      - "ffi/**"
      - ".github/workflows/build.yml"
      - ".github/workflows/scripts/**"
  pull_request:
    branches: [main]
    paths:
      - "ffi/**"
      - ".github/workflows/build.yml"
      - ".github/workflows/scripts/**"
  workflow_dispatch:
  workflow_call:
    outputs:
      run_id:
        description: "The run ID of this workflow"
        value: ${{ github.run_id }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_VERSION: "1.90.0"
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux_amd64
            target: x86_64-unknown-linux-gnu
            lib_ext: so

          - os: windows-latest
            platform: windows_amd64
            target: x86_64-pc-windows-msvc
            lib_ext: dll

          - os: macos-latest
            platform: darwin_arm64
            target: aarch64-apple-darwin
            lib_ext: dylib

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Platform Setup
      - name: Setup MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev tree

      # GraalVM Setup
      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: "23"
          distribution: "graalvm-community"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: "false"
          set-java-home: "true"

      - name: Verify GraalVM
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            # On Windows, convert path and use .cmd extension
            GRAALVM_HOME_UNIX=$(cygpath "$GRAALVM_HOME")
            JAVA_HOME_UNIX=$(cygpath "$JAVA_HOME")
            echo "GRAALVM_HOME (Windows): $GRAALVM_HOME"
            echo "GRAALVM_HOME (Unix): $GRAALVM_HOME_UNIX"
            echo "JAVA_HOME (Windows): $JAVA_HOME"
            echo "JAVA_HOME (Unix): $JAVA_HOME_UNIX"
            
            # Call native-image with Windows path
            "$GRAALVM_HOME/bin/native-image.cmd" --version
          else
            # Unix systems work normally
            echo "GRAALVM_HOME: $GRAALVM_HOME"
            echo "JAVA_HOME: $JAVA_HOME"
            java --version
            native-image --version
          fi

      # Rust Setup
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}

      # Aggressive Caching Strategy
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v2-rust"
          shared-key: ${{ matrix.target }}
          workspaces: "./ffi"
          cache-on-failure: true
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Cache GraalVM Native Image
        id: cache-graalvm
        uses: actions/cache@v4
        with:
          path: |
            ffi/target/${{ matrix.target }}/release/build/extractous-*/out
          key: graalvm-v5-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('ffi/Cargo.toml') }}
          restore-keys: |
            graalvm-v5-${{ runner.os }}-${{ matrix.target }}-

      - name: Build FFI library (Unix)
        if: runner.os != 'Windows'
        working-directory: ./ffi
        shell: bash
        run: |
          cargo build --release --target ${{ matrix.target }}
        env:
          RUST_BACKTRACE: 1

      # Build on Windows using PowerShell to avoid PATH issues with link.exe
      - name: Build FFI library (Windows)
        if: runner.os == 'Windows'
        working-directory: ./ffi
        shell: pwsh
        run: |
          cargo build --release --target ${{ matrix.target }}
        env:
          RUST_BACKTRACE: 1

      # Collect Dependencies
      - name: Collect libraries
        shell: bash
        run: |
          chmod +x .github/workflows/scripts/collect-libs.sh
          .github/workflows/scripts/collect-libs.sh ${{ matrix.platform }} ${{ matrix.target }} ${{ matrix.lib_ext }}

      # Strip Debug Symbols
      - name: Optimize libraries (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            find dist/${{ matrix.platform }}/lib -name "*.${{ matrix.lib_ext }}" -exec strip --strip-debug {} \;
          elif [ "${{ runner.os }}" = "macOS" ]; then
            find dist/${{ matrix.platform }}/lib -name "*.${{ matrix.lib_ext }}" -exec strip -x {} \;
          fi
          echo "Optimized size: $(du -sh dist/${{ matrix.platform }}/lib/ | cut -f1)"

      # Upload Artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extractous-ffi-${{ matrix.platform }}
          path: dist/${{ matrix.platform }}
          retention-days: 7
          compression-level: 9
          if-no-files-found: error
