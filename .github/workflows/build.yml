name: Build extractous-ffi

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  RUST_VERSION: "1.90.0"
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux_amd64
            target: x86_64-unknown-linux-gnu
            lib_ext: so
            os_name: Linux
            archive_ext: tar.gz
            
          - os: windows-latest
            platform: windows_amd64
            target: x86_64-pc-windows-msvc
            lib_ext: dll
            os_name: Windows
            archive_ext: zip
            
          # - os: macos-13
          #   platform: darwin_amd64
          #   target: x86_64-apple-darwin
          #   lib_ext: dylib
          #   os_name: macOS
          #   archive_ext: tar.gz
            
          # - os: macos-latest
          #   platform: darwin_arm64
          #   target: aarch64-apple-darwin
          #   lib_ext: dylib
          #   os_name: macOS
          #   archive_ext: tar.gz

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Platform-specific Setup
      - name: Setup Visual Studio (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y build-essential pkg-config libssl-dev tree

      - name: Install Xcode Command Line Tools (macOS)
        if: runner.os == 'macOS'
        run: |
          xcode-select --install 2>/dev/null || true

      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'false'
          set-java-home: 'true'

      - name: Verify native-image (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "GRAALVM_HOME: $env:GRAALVM_HOME"
          Write-Host "JAVA_HOME: $env:JAVA_HOME"
          & "$env:GRAALVM_HOME\bin\native-image.cmd" --version

      - name: Verify native-image (Linux / macOS)
        if: runner.os != 'Windows'
        run: |
          echo "GRAALVM_HOME: $GRAALVM_HOME"
          echo "JAVA_HOME: $JAVA_HOME"
          java --version
          native-image --version

      # Rust Toolchain
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          workspaces: "./ffi -> target"
          cache-on-failure: true

      - name: Cache GraalVM Native Image
        id: cache-graalvm
        uses: actions/cache@v4
        with:
          path: |
            ffi/target/${{ matrix.target }}/release/build/extractous-*/out
          key: graalvm-v3-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock', 'ffi/Cargo.toml') }}
          restore-keys: |
            graalvm-v3-${{ runner.os }}-${{ matrix.target }}-

      - name: Fix cached artifact timestamps
        if: steps.cache-graalvm.outputs.cache-hit == 'true'
        shell: bash
        run: |
          echo "=== Cache HIT - Fixing timestamps to prevent rebuild ==="
          
          # Update all cached artifacts to current time
          BUILD_CACHE="./ffi/target/${{ matrix.target }}/release/build"
          
          if [ -d "$BUILD_CACHE" ]; then
            # Touch all files in the extractous build directory
            find "$BUILD_CACHE" -type d -name "extractous-*" -exec find {} -type f -exec touch {} + 2>/dev/null || true
            
            # Specifically ensure libtika_native has fresh timestamp
            TIKA_LIB=$(find "$BUILD_CACHE" -name "libtika_native.*" -o -name "tika_native.*" 2>/dev/null | head -1)
            if [ -f "$TIKA_LIB" ]; then
              touch "$TIKA_LIB"
              echo "✓ Updated timestamp: $(basename $TIKA_LIB) - $(date -r "$TIKA_LIB" '+%Y-%m-%d %H:%M:%S')"
            fi
            
            # Also touch the fingerprint files that Cargo uses
            find "$BUILD_CACHE" -name ".fingerprint" -type d -exec find {} -type f -exec touch {} + 2>/dev/null || true
            
            echo "✓ All cached artifacts updated"
          fi

      - name: Cache status
        shell: bash
        run: |
          if [ "${{ steps.cache-graalvm.outputs.cache-hit }}" = "true" ]; then
            echo "✓ GraalVM cache HIT - Native image should not recompile"
          else
            echo "⚠ GraalVM cache MISS - Full native image compilation (~5-6 minutes)"
          fi


      # For Unix-based systems (Linux/macOS)
      - name: Build FFI library (Unix)
        if: runner.os != 'Windows'
        working-directory: ./ffi
        shell: bash
        run: |
          BUILD_START=$(date +%s)
          cargo build --release --target ${{ matrix.target }} --quiet
          BUILD_END=$(date +%s)
          BUILD_TIME=$((BUILD_END - BUILD_START))
          echo "Build completed in ${BUILD_TIME}s"
          echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_ENV
          tree -P "*.so|*.rs" --prune
        env:
          RUST_BACKTRACE: 1

      # For Windows
      - name: Build FFI library (Windows)
        if: runner.os == 'Windows'
        working-directory: ./ffi
        shell: pwsh
        run: |
          $BUILD_START = [DateTimeOffset]::UtcNow.ToUnixTimeSeconds()
          cargo build --release --target ${{ matrix.target }} --quiet
          $BUILD_END = [DateTimeOffset]::UtcNow.ToUnixTimeSeconds()
          $BUILD_TIME = $BUILD_END - $BUILD_START
          Write-Host "Build completed in $BUILD_TIME seconds"
          "BUILD_TIME=$BUILD_TIME" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Get-ChildItem -Recurse -Include *.dll, *.lib, *.rs | ForEach-Object {
            $relative = $_.FullName.Substring((Get-Location).Path.Length + 1)
            $indent = ($relative.Split([IO.Path]::DirectorySeparatorChar).Count - 1) * '  '
            Write-Host ("{0}{1}" -f $indent, $_.Name)
          }
        env:
          RUST_BACKTRACE: 1


      # Verify Build
      - name: Verify build outputs
        shell: bash
        run: |
          chmod +x ./.github/workflows/scripts/verify-build.sh
          ./.github/workflows/scripts/verify-build.sh ${{ matrix.target }} ${{ matrix.lib_ext }} ${{ matrix.os_name }}

      # Collect Dependencies
      - name: Collect dependencies
        shell: bash
        run: |
          chmod +x ./.github/workflows/scripts/collect-dependencies.sh
          ./.github/workflows/scripts/collect-dependencies.sh ${{ matrix.platform }} ${{ matrix.target }} ${{ matrix.lib_ext }} ${{ matrix.os_name }}

      # Optimize Libraries
      - name: Strip debug symbols (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [ "${{ matrix.os_name }}" = "Linux" ]; then
            find dist/${{ matrix.platform }}/lib -name "*.so" -exec strip --strip-debug {} \;
          elif [ "${{ matrix.os_name }}" = "macOS" ]; then
            find dist/${{ matrix.platform }}/lib -name "*.dylib" -exec strip -x {} \;
          fi
          echo "Optimized size: $(du -sh dist/${{ matrix.platform }}/lib/ | cut -f1)"

      # # Verify Distribution
      # - name: Verify distribution
      #   shell: bash
      #   run: |
      #     chmod +x ./.github/workflows/scripts/verify-distribution.sh
      #     ./.github/workflows/scripts/verify-distribution.sh ${{ matrix.platform }} ${{ matrix.lib_ext }} ${{ matrix.os_name }}

      # Create Archive
      - name: Create distribution archive
        shell: bash
        run: |
          cd dist/${{ matrix.platform }}
          
          if [ "${{ matrix.os_name }}" = "Windows" ]; then
            7z a ../../extractous-ffi-${{ matrix.platform }}.${{ matrix.archive_ext }} lib/ include/
          else
            tar -czf ../../extractous-ffi-${{ matrix.platform }}.${{ matrix.archive_ext }} lib/ include/
          fi
          
          cd ../..
          ls -lh extractous-ffi-${{ matrix.platform }}.${{ matrix.archive_ext }}

      # Generate Checksums
      - name: Generate checksums
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            certutil -hashfile extractous-ffi-${{ matrix.platform }}.${{ matrix.archive_ext }} SHA256 > extractous-ffi-${{ matrix.platform }}.${{ matrix.archive_ext }}.sha256
          else
            shasum -a 256 extractous-ffi-${{ matrix.platform }}.${{ matrix.archive_ext }} > extractous-ffi-${{ matrix.platform }}.${{ matrix.archive_ext }}.sha256
          fi
          cat extractous-ffi-${{ matrix.platform }}.${{ matrix.archive_ext }}.sha256

      # Upload Artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extractous-ffi-${{ matrix.platform }}
          path: |
            extractous-ffi-${{ matrix.platform }}.${{ matrix.archive_ext }}
            extractous-ffi-${{ matrix.platform }}.${{ matrix.archive_ext }}.sha256
          retention-days: 3
