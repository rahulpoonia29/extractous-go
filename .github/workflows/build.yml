name: Build extractous-ffi

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  RUST_VERSION: "1.90.0"
  CARGO_TERM_COLOR: always

jobs:
  ffi-build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux_amd64
            target: x86_64-unknown-linux-gnu
            lib_ext: so
            os_name: Linux
            
          - os: windows-latest
            platform: windows_amd64
            target: x86_64-pc-windows-msvc
            lib_ext: dll
            os_name: Windows
            
          # - os: macos-13
          #   platform: darwin_amd64
          #   target: x86_64-apple-darwin
          #   lib_ext: dylib
          #   os_name: macOS
            
          # - os: macos-latest
          #   platform: darwin_arm64
          #   target: aarch64-apple-darwin
          #   lib_ext: dylib
          #   os_name: macOS

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Windows-specific: Setup Visual Studio Build Environment
      - name: Setup Visual Studio Developer Command Prompt
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Remove Git's link.exe from PATH (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Git's link.exe conflicts with Visual Studio's link.exe
          # Remove Git's /usr/bin from PATH to prevent conflicts
          $gitPath = "C:\Program Files\Git\usr\bin"
          $env:PATH = ($env:PATH.Split(';') | Where-Object { $_ -ne $gitPath }) -join ';'
          
          # Verify correct link.exe is in PATH
          Write-Host "Link.exe location:"
          (Get-Command link.exe).Path
          
          # Save updated PATH for subsequent steps
          echo "PATH=$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # Install Rust
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}

      # Linux-specific dependencies
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libssl-dev \
            tree

      # macOS-specific dependencies
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install tree

      # Setup GraalVM with native-image
      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1.4.1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'

      # Cache build artifacts (changes with source code)
      - name: Cache FFI build artifacts
        id: cache-ffi
        uses: actions/cache@v3
        with:
          path: ffi/target
          key: ffi-build-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock', 'ffi/**/*.rs', 'ffi/build.rs', 'ffi/Cargo.toml') }}
          restore-keys: |
            ffi-build-${{ runner.os }}-${{ matrix.target }}-

      - name: Fix timestamps after cache restore
        if: steps.cache-ffi.outputs.cache-hit == 'true'
        working-directory: ./ffi
        shell: bash
        run: |
          echo "Cache restored, fixing timestamps for incremental compilation..."
          # Touch source files FIRST (make them appear newer)
          find . -name "*.rs" -exec touch {} + 2>/dev/null || true
          find . -name "Cargo.toml" -exec touch {} + 2>/dev/null || true
          find . -name "Cargo.lock" -exec touch {} + 2>/dev/null || true
          find . -name "build.rs" -exec touch {} + 2>/dev/null || true
          # Then touch build artifacts (make them appear older than source)
          find target -type f -exec touch {} + 2>/dev/null || true
          echo "âœ“ Timestamps fixed to preserve incremental builds"

      - name: Verify environment
        shell: bash
        run: |
          echo "### Build Environment" >> $GITHUB_STEP_SUMMARY
          echo "- **Rust:** $(rustc --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Cargo:** $(cargo --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Target:** ${{ matrix.target }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform:** ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Status:** ${{ env.CACHE_HIT }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      # Build the FFI library
      - name: Build extractous FFI
        working-directory: ./ffi
        shell: bash
        run: |
          set -e
          echo "=== Building extractous FFI for ${{ matrix.target }} ==="
          BUILD_START_TIME=$(date +%s)

          cargo build --release --target ${{ matrix.target }}

          BUILD_END_TIME=$(date +%s)
          BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
          echo "Build completed in ${BUILD_DURATION}s"
          echo "BUILD_DURATION=${BUILD_DURATION}" >> $GITHUB_ENV
          echo "Directory Strucute"
          tree --prune -P "*.so|*.ru"

      # Verify build outputs
      - name: Verify build outputs
        shell: bash
        run: |
          chmod +x ./.github/workflows/scripts/verify-build.sh
          ./.github/workflows/scripts/verify-build.sh \
            "${{ matrix.target }}" \
            "${{ matrix.lib_ext }}" \
            "${{ matrix.os_name }}"

      # Collect distribution artifacts with smart dependency resolution
      - name: Collect distribution artifacts
        shell: bash
        run: |
          chmod +x ./.github/workflows/scripts/collect-dependencies.sh
          ./.github/workflows/scripts/collect-dependencies.sh \
            "${{ matrix.platform }}" \
            "${{ matrix.target }}" \
            "${{ matrix.lib_ext }}" \
            "${{ matrix.os_name }}"

      # Verify distribution artifacts
      - name: Verify distribution artifacts
        shell: bash
        run: |
          chmod +x ./.github/workflows/scripts/verify-distribution.sh
          ./.github/workflows/scripts/verify-distribution.sh \
            "${{ matrix.platform }}" \
            "${{ matrix.lib_ext }}"

      # Upload distribution artifacts
      - name: Upload FFI distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extractous-ffi-${{ matrix.platform }}
          path: dist/${{ matrix.platform }}
          retention-days: 5
          compression-level: 6

      # Build summary
      - name: Build summary
        shell: bash
        run: |
          echo "## âœ“ Build Complete - ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Platform** | ${{ matrix.platform }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Target** | ${{ matrix.target }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **OS** | ${{ matrix.os }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Duration** | ${BUILD_DURATION}s |" >> $GITHUB_STEP_SUMMARY
          echo "| **Cache Hit** | ${{ steps.cache-ffi.outputs.cache-hit }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Library Extension** | .${{ matrix.lib_ext }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“¦ \`extractous-ffi-${{ matrix.platform }}\` - Distribution ready libraries" >> $GITHUB_STEP_SUMMARY
