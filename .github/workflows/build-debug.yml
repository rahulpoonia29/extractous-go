name: Build extractous-ffi (Debug Enhanced)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  RUST_BACKTRACE: full
  RUST_LOG: debug

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            platform: linux_amd64
            artifact-name: libextractous_ffi.so
          - os: macos-12
            target: x86_64-apple-darwin
            platform: darwin_amd64
            artifact-name: libextractous_ffi.dylib
          - os: macos-12
            target: aarch64-apple-darwin
            platform: darwin_arm64
            artifact-name: libextractous_ffi.dylib
          - os: windows-2019
            target: x86_64-pc-windows-msvc
            platform: windows_amd64
            artifact-name: extractous_ffi.dll

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup GraalVM
        id: setup-graalvm
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust
        id: setup-rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.78.0
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}-debug

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-20.04'
        run: |
          echo "::group::Installing Ubuntu dependencies"
          sudo apt-get update -y
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libssl-dev \
            file \
            strace \
            ldd
          echo "::endgroup::"

      - name: Install system dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          echo "::group::Installing macOS dependencies"
          # Install any additional tools needed for debugging
          brew install --quiet file
          echo "::endgroup::"

      - name: Install cbindgen
        run: |
          echo "::group::Installing cbindgen"
          cargo install cbindgen --force
          echo "cbindgen version: $(cbindgen --version)"
          echo "::endgroup::"

      - name: Environment Debug Information
        run: |
          echo "::group::=== Build Environment Debug Info ==="
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Runner OS: ${{ runner.os }}"
          echo "Runner Arch: ${{ runner.arch }}"
          echo "Matrix OS: ${{ matrix.os }}"
          echo "Target: ${{ matrix.target }}"
          echo "Platform: ${{ matrix.platform }}"
          echo ""
          
          echo "=== System Information ==="
          uname -a || true
          
          if command -v lscpu >/dev/null 2>&1; then
            echo "CPU Info:"
            lscpu | head -20 || true
          fi
          
          echo "Memory Info:"
          free -h || vm_stat || systeminfo | findstr "Physical Memory" || true
          
          echo "Disk Space:"
          df -h . || true
          
          echo "=== Environment Variables ==="
          echo "PWD: $PWD"
          echo "HOME: $HOME"
          echo "USER: $USER"
          echo "JAVA_HOME: $JAVA_HOME"
          echo "GRAALVM_HOME: $GRAALVM_HOME"
          echo "CARGO_HOME: ${CARGO_HOME:-$HOME/.cargo}"
          echo "RUSTUP_HOME: ${RUSTUP_HOME:-$HOME/.rustup}"
          echo "TARGET: ${{ matrix.target }}"
          echo "RUST_BACKTRACE: $RUST_BACKTRACE"
          echo "RUST_LOG: $RUST_LOG"
          echo ""
          
          echo "=== PATH ==="
          echo "$PATH" | tr ':' '\n' || echo "$PATH"
          echo ""
          
          echo "=== Tool Versions ==="
          echo "Java: $(java -version 2>&1 | head -1)"
          echo "Native Image: $(native-image --version 2>&1 | head -1)"
          echo "Rust: $(rustc --version)"
          echo "Cargo: $(cargo --version)"
          echo "cbindgen: $(cbindgen --version)"
          echo "Git: $(git --version)"
          
          if command -v gcc >/dev/null 2>&1; then
            echo "GCC: $(gcc --version | head -1)"
          fi
          
          if command -v clang >/dev/null 2>&1; then
            echo "Clang: $(clang --version | head -1)"
          fi
          
          echo "::endgroup::"

      - name: Pre-build Debug Information
        run: |
          echo "::group::=== Pre-build State ==="
          echo "Current directory contents:"
          ls -la
          echo ""
          
          echo "Cargo.toml contents:"
          cat Cargo.toml || echo "Cargo.toml not found"
          echo ""
          
          echo "build.rs contents:"
          cat build.rs || echo "build.rs not found"
          echo ""
          
          echo "src directory:"
          find src -type f -name "*.rs" -exec echo "=== {} ===" \; -exec head -10 {} \; 2>/dev/null || echo "No src directory found"
          echo ""
          
          echo "Cargo cache info:"
          du -sh ~/.cargo 2>/dev/null || echo "No cargo cache found"
          echo ""
          
          echo "Target directory (if exists):"
          if [ -d "target" ]; then
            du -sh target
            find target -name "*.so" -o -name "*.dylib" -o -name "*.dll" 2>/dev/null | head -10
          else
            echo "No target directory yet"
          fi
          echo "::endgroup::"

      # Enhanced FFI build step with extensive debugging
      - name: Build FFI library (with debug)
        id: build-ffi
        run: |
          echo "::group::=== Starting FFI Build ==="
          echo "Build started at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Building for target: ${{ matrix.target }}"
          echo "Expected artifact: ${{ matrix.artifact-name }}"
          echo ""
          
          # Set additional debug flags
          export RUST_BACKTRACE=full
          export RUST_LOG=debug
          export CARGO_LOG=cargo::ops::cargo_compile=trace
          
          echo "=== Cargo Check First ==="
          echo "Running cargo check to validate dependencies..."
          if ! cargo check --target ${{ matrix.target }} --verbose; then
            echo "❌ Cargo check failed!"
            echo "::error::Cargo check failed for target ${{ matrix.target }}"
            exit 1
          fi
          echo "✅ Cargo check passed"
          echo ""
          
          echo "=== Dependency Resolution ==="
          echo "Cargo tree (showing dependency graph):"
          cargo tree --target ${{ matrix.target }} || true
          echo ""
          
          echo "=== Starting Release Build ==="
          echo "Command: cargo build --release --target ${{ matrix.target }} --verbose"
          
          # Capture build start time
          BUILD_START_TIME=$(date +%s)
          
          # Run the actual build with comprehensive logging
          if cargo build --release --target ${{ matrix.target }} --verbose 2>&1 | tee build.log; then
            BUILD_END_TIME=$(date +%s)
            BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
            echo "✅ Build completed successfully in ${BUILD_DURATION} seconds"
          else
            BUILD_END_TIME=$(date +%s)
            BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
            echo "❌ Build failed after ${BUILD_DURATION} seconds"
            
            echo "::group::=== Build Failure Analysis ==="
            echo "Last 50 lines of build log:"
            tail -50 build.log || true
            echo ""
            
            echo "Searching for common error patterns:"
            grep -i "error\|failed\|cannot find\|undefined reference\|linker.*error" build.log || echo "No common error patterns found"
            echo ""
            
            echo "Build directory state after failure:"
            find target -type f -name "*.rlib" -o -name "*.so" -o -name "*.dylib" -o -name "*.dll" 2>/dev/null | head -20 || echo "No build artifacts found"
            echo "::endgroup::"
            
            echo "::error::Build failed for target ${{ matrix.target }}"
            exit 1
          fi
          echo "::endgroup::"

      - name: Post-build Debug Information
        if: success() || failure()
        run: |
          echo "::group::=== Post-build Analysis ==="
          echo "Build completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          echo "=== Target Directory Structure ==="
          if [ -d "target/${{ matrix.target }}" ]; then
            echo "Target directory size:"
            du -sh target/${{ matrix.target }}
            echo ""
            
            echo "Built artifacts:"
            find target/${{ matrix.target }} -type f \( -name "*.so" -o -name "*.dylib" -o -name "*.dll" -o -name "*.rlib" \) -exec ls -lh {} \;
            echo ""
            
            echo "Release directory contents:"
            ls -la target/${{ matrix.target }}/release/ || echo "Release directory not found"
            echo ""
          fi
          
          echo "=== Build Dependencies Analysis ==="
          BUILD_DIRS=$(find target/${{ matrix.target }}/release/build -name "extractous-*" -type d 2>/dev/null || true)
          echo "Found extractous build directories:"
          for dir in $BUILD_DIRS; do
            echo "  - $dir"
            if [ -d "$dir" ]; then
              echo "    Contents:"
              ls -la "$dir" | head -10
              
              # Look for native libraries
              if [ -d "$dir/out" ]; then
                echo "    Out directory:"
                find "$dir/out" -type f \( -name "*.so" -o -name "*.dylib" -o -name "*.dll" \) -exec ls -lh {} \; 2>/dev/null || echo "    No native libraries found in out/"
              fi
            fi
          done
          echo ""
          
          echo "=== Native Libraries Search ==="
          echo "Searching for tika_native libraries in entire target directory:"
          find target -name "*tika_native*" -type f 2>/dev/null | while read file; do
            echo "Found: $file"
            ls -lh "$file"
            file "$file" 2>/dev/null || true
          done
          echo ""
          
          echo "=== Generated Headers ==="
          if [ -f "include/extractous.h" ]; then
            echo "✅ Header file generated:"
            ls -la include/extractous.h
            echo "Header size: $(wc -l include/extractous.h | awk '{print $1}') lines"
          else
            echo "❌ Header file not found at include/extractous.h"
            find . -name "*.h" -type f 2>/dev/null | head -5
          fi
          echo "::endgroup::"

      - name: Prepare distribution (with debug)
        if: success()
        shell: bash
        run: |
          echo "::group::=== Preparing Distribution ==="
          
          # Create distribution directory
          mkdir -p dist/${{ matrix.platform }}
          echo "Created dist/${{ matrix.platform }}"
          
          # Copy main FFI library
          FFI_LIB="target/${{ matrix.target }}/release/${{ matrix.artifact-name }}"
          if [ -f "$FFI_LIB" ]; then
            cp "$FFI_LIB" "dist/${{ matrix.platform }}/"
            echo "✅ Copied FFI library: $FFI_LIB"
            ls -lh "dist/${{ matrix.platform }}/${{ matrix.artifact-name }}"
            
            # Analyze the FFI library
            echo "FFI Library analysis:"
            file "dist/${{ matrix.platform }}/${{ matrix.artifact-name }}"
            
            if [[ "${{ runner.os }}" == "Linux" ]]; then
              echo "Dependencies (ldd):"
              ldd "dist/${{ matrix.platform }}/${{ matrix.artifact-name }}" || true
              echo "Symbols (first 10):"
              nm -D "dist/${{ matrix.platform }}/${{ matrix.artifact-name }}" 2>/dev/null | head -10 || true
            elif [[ "${{ runner.os }}" == "macOS" ]]; then
              echo "Dependencies (otool):"
              otool -L "dist/${{ matrix.platform }}/${{ matrix.artifact-name }}" || true
              echo "Symbols (first 10):"
              nm "dist/${{ matrix.platform }}/${{ matrix.artifact-name }}" 2>/dev/null | head -10 || true
            fi
          else
            echo "❌ FFI library not found at: $FFI_LIB"
            echo "Available files in release directory:"
            ls -la target/${{ matrix.target }}/release/
            echo "::error::Expected FFI library not found: ${{ matrix.artifact-name }}"
            exit 1
          fi
          
          # Find and copy native Tika libraries
          echo ""
          echo "=== Searching for Native Tika Libraries ==="
          BUILD_DIRS=$(find target/${{ matrix.target }}/release/build -name "extractous-core-*" -type d 2>/dev/null || true)
          FOUND_LIBS=false
          
          for BUILD_DIR in $BUILD_DIRS; do
            LIBS_DIR="$BUILD_DIR/out/libs"
            if [ -d "$LIBS_DIR" ]; then
              echo "✅ Found native libraries in: $LIBS_DIR"
              echo "Contents:"
              ls -la "$LIBS_DIR"
              
              echo "Copying libraries..."
              cp -v "$LIBS_DIR"/* "dist/${{ matrix.platform }}/" || true
              FOUND_LIBS=true
              
              # Analyze each native library
              for lib in "$LIBS_DIR"/*; do
                if [ -f "$lib" ]; then
                  echo ""
                  echo "Analysis of $(basename "$lib"):"
                  file "$lib"
                  
                  if [[ "${{ runner.os }}" == "Linux" && "$lib" == *.so ]]; then
                    ldd "$lib" 2>/dev/null | head -5 || echo "Could not analyze dependencies"
                  elif [[ "${{ runner.os }}" == "macOS" && "$lib" == *.dylib ]]; then
                    otool -L "$lib" 2>/dev/null | head -5 || echo "Could not analyze dependencies"
                  fi
                fi
              done
              break
            else
              echo "No libs directory found in: $BUILD_DIR"
            fi
          done
          
          if [ "$FOUND_LIBS" = false ]; then
            echo "⚠️  No native libraries found in extractous build directories"
            echo "This might be normal if extractous didn't build native components"
          fi
          
          # Copy generated header
          if [ -f "include/extractous.h" ]; then
            cp "include/extractous.h" "dist/${{ matrix.platform }}/"
            echo "✅ Copied header file"
          else
            echo "⚠️  Header file not found"
          fi
          
          echo ""
          echo "=== Final Distribution Contents ==="
          ls -la "dist/${{ matrix.platform }}/"
          
          echo ""
          echo "=== Distribution Size ==="
          du -sh "dist/${{ matrix.platform }}"
          
          echo "::endgroup::"

      - name: Final Verification
        if: success()
        shell: bash
        working-directory: dist/${{ matrix.platform }}
        run: |
          echo "::group::=== Final Verification ==="
          
          echo "=== All Files ==="
          ls -la
          
          echo ""
          echo "=== File Types ==="
          for file in *; do
            if [ -f "$file" ]; then
              echo "$file: $(file "$file")"
            fi
          done
          
          echo ""
          echo "=== Library Loading Test ==="
          
          # Create a simple library loading test
          cat > test_load.c << 'EOF'
          #include <stdio.h>
          #include <stdlib.h>
          
          #if defined(_WIN32)
            #include <windows.h>
            #define LOAD_LIBRARY(path) LoadLibrary(path)
            #define CLOSE_LIBRARY(lib) FreeLibrary(lib)
            typedef HMODULE lib_handle_t;
          #else
            #include <dlfcn.h>
            #define LOAD_LIBRARY(path) dlopen(path, RTLD_LAZY)
            #define CLOSE_LIBRARY(lib) dlclose(lib)
            typedef void* lib_handle_t;
          #endif
          
          int main() {
              const char* lib_name;
              
              #if defined(_WIN32)
              lib_name = "extractous_ffi.dll";
              #elif defined(__APPLE__)
              lib_name = "./libextractous_ffi.dylib";
              #else
              lib_name = "./libextractous_ffi.so";
              #endif
              
              printf("Attempting to load: %s\n", lib_name);
              
              lib_handle_t lib = LOAD_LIBRARY(lib_name);
              if (!lib) {
                  #if defined(_WIN32)
                  printf("Failed to load library. Error code: %lu\n", GetLastError());
                  #else
                  printf("Failed to load library: %s\n", dlerror());
                  #endif
                  return 1;
              }
              
              printf("✅ Library loaded successfully\n");
              CLOSE_LIBRARY(lib);
              return 0;
          }
          EOF
          
          # Compile and run test
          if command -v gcc >/dev/null 2>&1; then
            echo "Compiling loading test..."
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              gcc test_load.c -o test_load.exe || echo "Could not compile test"
              if [ -f "test_load.exe" ]; then
                ./test_load.exe || echo "Library loading test failed"
              fi
            else
              gcc test_load.c -ldl -o test_load || echo "Could not compile test"
              if [ -f "test_load" ]; then
                ./test_load || echo "Library loading test failed"
              fi
            fi
          else
            echo "GCC not available, skipping loading test"
          fi
          
          echo "::endgroup::"

      - name: Upload build logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.platform }}-failure
          path: |
            build.log
            target/${{ matrix.target }}/release/build/extractous-*/out/
          if-no-files-found: ignore

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: extractous-ffi-${{ matrix.platform }}
          path: dist/${{ matrix.platform }}
          retention-days: 30